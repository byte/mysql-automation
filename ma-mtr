#!/bin/bash -exu
#
# Run a MySQL test suite collection (mysql-test-run.pl).
# Arguments after the double-dash separator (--) are passed to MTR.
#
# Options:
#
#  -c, --collection <name>
#  Name of the test suite collection.
#
#  -v, --var-dir <dir>
#  Top-level directory where test run files are stored.
#
#  -b, --base-port <port>
#  Base for port number. See MTR_BASE_PORT for reference.
#
#  -r, --results <dir>
#  Directory where test run results are stored.
#
#  -p, --preload <source>
#  Script to be loaded before executing tests.
#
#  -j, --junit
#  Produce JUnit test summary XML.
#
#  -h, --help
#  Print a help message and exit.
#
# Usage:
#
#  $ ma-mtr --collection default.push   \
#           --var-dir /dev/shm          \
#           --base-port 2500            \
#           --preload preload.sh        \
#           --                          \
#           --debug-server
#

E_BADARGS=65
E_NOFILE=66
E_FAILURE=67

#
# Command options.
#

program_name=$0

function usage
{
  echo "Usage: $program_name --collection <name> --var-dir <dir>"  \
                            "--base-port <base> --results <dir>"   \
                            "--preload <source> --junit --help"
  exit $E_BADARGS
}

# Print usage if no parameters were given.
if [ $# -eq 0 ]; then usage; fi

# Parse command options.
TEMP=$(getopt -n "$program_name" -o c:v:b:r:p:h \
-l collection:,var-dir:,base-port:,results:,preload:,junit,help -- "$@")

# Error was reported on stderr.
if [ $? != 0 ]; then exit $E_BADARGS; fi

eval set -- "$TEMP"

#
# Process command options.
#

PRELOAD="/dev/null"
JUNIT=false

while true
do
  case "$1" in
    -c|--collection) COLLECTION="collections/$2"; shift 2 ;;
    -v|--var-dir) VAR_DIR=$2; shift 2 ;;
    -b|--base-port) BASE_PORT=$2; shift 2 ;;
    -r|--results) RESULTS_DIR=$2; shift 2 ;;
    -p|--preload) PRELOAD=$2; shift 2 ;;
    -j|--junit) JUNIT=true; shift ;;
    -h|--help) usage ;;
    --) shift ; break ;;
    *) echo "Unknown error!" ; exit 1 ;;
  esac
done

# Required option.
function missing
{
  echo "$program_name: option \`$1' is required" >&2
  exit $E_BADARGS
}

# Collection pathname.
if [[ ${COLLECTION:+isset} != isset ]]; then
  missing "--collection";
elif [ ! -f $COLLECTION ]; then
  echo "\"$COLLECTION\" either does not exist, or is not a file." >&2
  exit $E_NOFILE
fi

# Port base.
if [[ ${BASE_PORT:+isset} != isset ]]; then
  missing "--base-port";
elif ! [ "$BASE_PORT" -ge 5001 -a "$BASE_PORT" -le 32757 ] 2>&-; then
  echo "Invalid port number: \"$BASE_PORT\"." >&2
  echo "The base port must be an integer in the range 5001 - 32767." >&2
  exit $E_BADARGS
elif [ $(($BASE_PORT%10)) -ne 0 ]; then
  echo "Invalid port number: \"$BASE_PORT\"." >&2
  echo "The base port must be a multiple of 10." >&2
  exit $E_BADARGS
fi

# Results directory.
if [[ ${RESULTS_DIR:+isset} != isset ]]; then
  missing "--results";
elif [ ! -d $RESULTS_DIR ]; then
  echo "\"$RESULTS_DIR\" either does not exist, or is not a directory." >&2
  exit $E_NOFILE
fi

# Preload source.
if [[ ! -e $PRELOAD ]]; then
  echo "\"$PRELOAD\" does not exist." >&2
  exit $E_NOFILE
fi

# Get the value associated with a command-line option.
function get_cmd_option
{
  local name=$1
  shift
  TEMP=$(getopt -q -l $name: -- "$@")
  eval set -- "$TEMP"
  case "$1" in
    --$name) echo "$2" ;;
    *) echo ;;
  esac
}

# Archive the vardir directory.
function archive_var_dir
{
  # Archive name.
  local name="$1"; shift
  # Var directory.
  local vardir="$@"
  # Use the last component as the archive prefix.
  local dirname=$(dirname "$vardir")
  local basename=$(basename "$vardir")
  # Create archive.
  tar -zcf "$RESULTS_DIR/var-$name.tar.gz" -C "$dirname" "$basename"
  # Remove archived files.
  rm -r "$vardir"
}

source $PRELOAD

SIGINT=0
JUNIT_ARGS=""

# A collection file contains zero or more lines, with one
# invocation of mysql-test-run.pl on each.
while read mtr_cmd
do
    # Skip blank lines.
    if [[ ! $mtr_cmd =~ [^[:space:]] ]]; then
      continue
    fi

    # Skip comments (lines beginning with a #).
    if [[ $mtr_cmd =~ ^\# ]]; then
      continue
    fi

    # Trap interrupt program event.
    trap "SIGINT=1" SIGINT

    # Get an existing vardir/comment option for concatenation.
    COMMENT=$(get_cmd_option "comment" $mtr_cmd)
    BASE_VAR_DIR=$(get_cmd_option "vardir" $mtr_cmd)
    PATH_VAR_DIR=${VAR_DIR:+${VAR_DIR}/}$BASE_VAR_DIR
    MTR_LOG="$RESULTS_DIR/mtr-$COMMENT.log"

    if [ $JUNIT = true ]; then
      JUNIT_ARGS="--junit-package=$COMMENT "
      JUNIT_ARGS+="--junit-output=$RESULTS_DIR/junit-$COMMENT.xml"
    fi

    # Temporarily turn off exit on error.
    set +e

    # Execute command passing extra arguments.
    $mtr_cmd --vardir="$PATH_VAR_DIR" --port-base=$BASE_PORT \
    $JUNIT_ARGS "$@" 2>&1 | tee "$MTR_LOG"

    # Save exit status of $mtr_cmd
    STATUS=${PIPESTATUS[0]}

    # Exit on error.
    set -e

    # Break loop on interrupt program signal.
    if [ $SIGINT = 1 ]; then
      break
    fi

    # Save vardir.
    if [ -d "$PATH_VAR_DIR" ]; then
      archive_var_dir "$COMMENT" "$PATH_VAR_DIR"
    fi

    # If the error was fatal, fail the test run.
    if test $STATUS -eq 1; then
      FATAL=1
      # Patterns that indicate a non-fatal error condition.
      grep -q 'there were failing test cases' "$MTR_LOG" && FATAL=0
      if test $FATAL -eq 1; then
        echo "Fatal error. See \"$MTR_LOG\" for more details." >&2
        exit $E_FAILURE
      fi
    elif test $STATUS -ne 0; then
      echo "Exit status indicates a fatal error." >&2
      exit $E_FAILURE
    fi
done < $COLLECTION

# Test reports are generated in a later stage.
exit 0
